-- This document includes the steps taken for the Process Phase and the Analyze Phase.
-- It also contains the SQL script used in almost all of its steps.

-- PROCESS PHASE

-- 1. Data Format Verification:
-- Data was converted to .xlsx format for proper import into SQL.

-- 2. Column and Data Type Verification:
-- Verify column names and data types during the file upload process.
-- We review column names, types, and null allowances across 12 monthly datasets.

-- 3. Data Consolidation:
-- Merge the 12 monthly tables into a single table.

-- SQL Query for data consolidation:
SELECT *
INTO Cyclistic_TripData_2022
FROM divvy_tripdata_202201
UNION ALL
SELECT *
FROM divvy_tripdata_202202
UNION ALL
SELECT *
FROM divvy_tripdata_202203
UNION ALL
SELECT *
FROM divvy_tripdata_202204
UNION ALL
SELECT *
FROM divvy_tripdata_202205
UNION ALL
SELECT *
FROM divvy_tripdata_202206
UNION ALL
SELECT *
FROM divvy_tripdata_202207
UNION ALL
SELECT *
FROM divvy_tripdata_202208
UNION ALL
SELECT *
FROM divvy_tripdata_202209
UNION ALL
SELECT *
FROM divvy_tripdata_202210
UNION ALL
SELECT *
FROM divvy_tripdata_202211
UNION ALL
SELECT *
FROM divvy_tripdata_202212
;

-- Note: This breakdown will be used in the following step.
-- Breakdown of the FROM Clause:
-- cyclistic_bike_share: This is the name of the database that contains your table.
-- dbo: This is the schema within the database.
-- Cyclistic_TripData_2022: This is the specific table created from the consolidated data.

-- 4. Error Detection:
-- Verify categorical values and check for duplicates.

-- SQL Query for Checking categories for rideable_type:
SELECT
	rideable_type
FROM 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY
	rideable_type
;

-- SQL Query for checking categories for member_casual column:
SELECT 
	DISTINCT member_casual
FROM 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
;

-- SQL Query for checking duplicates in the ride_id column:
SELECT
	ride_id,
	COUNT(*) as duplicate_count
FROM 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY
	ride_id
HAVING
	COUNT(*) > 1
;

-- 5. Null Value Management:
-- Analyze and retain records with essential data, despite null values in station columns.

-- SQL Query for checking null values in all columns:
SELECT
   SUM(CASE WHEN ride_id IS NULL THEN 1 ELSE 0 END) AS ride_id_null_count,
   SUM(CASE WHEN rideable_type IS NULL THEN 1 ELSE 0 END) AS rideable_type_null_count,
   SUM(CASE WHEN started_at IS NULL THEN 1 ELSE 0 END) AS started_at_null_count,
   SUM(CASE WHEN ended_at IS NULL THEN 1 ELSE 0 END) AS ended_at_null_count,
   SUM(CASE WHEN start_station_name IS NULL THEN 1 ELSE 0 END) AS start_station_name_null_count,
   SUM(CASE WHEN start_station_id IS NULL THEN 1 ELSE 0 END) AS start_station_id_null_count,
   SUM(CASE WHEN end_station_name IS NULL THEN 1 ELSE 0 END) AS end_station_name_null_count,
   SUM(CASE WHEN end_station_id IS NULL THEN 1 ELSE 0 END) AS end_station_id_null_count,
   SUM(CASE WHEN start_lat IS NULL THEN 1 ELSE 0 END) AS start_lat_null_count,
   SUM(CASE WHEN start_lng IS NULL THEN 1 ELSE 0 END) AS start_lng_null_count,
   SUM(CASE WHEN end_lat IS NULL THEN 1 ELSE 0 END) AS end_lat_null_count,
   SUM(CASE WHEN end_lng IS NULL THEN 1 ELSE 0 END) AS end_lng_null_count,
   SUM(CASE WHEN member_casual IS NULL THEN 1 ELSE 0 END) AS member_casual_null_count
FROM 
   cyclistic_bike_share.dbo.Cyclistic_TripData_2022
;

-- 6. New Column Creation:
-- Create new columns for enhanced analysis and populate them.

-- SQL Query for creating a column for trip duration in seconds:
ALTER TABLE 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
ADD 
	ride_length_seconds float
;

-- SQL Query for populating the trip duration column in seconds:
UPDATE 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
SET 
	ride_length_seconds = DATEDIFF(SECOND, started_at, ended_at)
;

-- SQL Query for creating a column for the hour of the day:
ALTER TABLE
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
ADD
	hour_of_day nvarchar(50)
;

-- SQL Query for populating the hour of the day column:
UPDATE 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
SET 
	hour_of_day = FORMAt(started_at, 'HH')
;

-- SQL Query for creating a column for the day of the week:
ALTER TABLE 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
ADD	
	day_of_week nvarchar(50)
;

-- SQL Query for populating the day of the week column:
UPDATE
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
SET 
	day_of_week = FORMAt(started_at, 'dddd')
;

-- SQL Query for creating a column for the month:
ALTER TABLE 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
ADD 
	month nvarchar(50)
;

-- SQL Query for populating the month column:
UPDATE 
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
SET 
	month = FORMAt(started_at, 'MMMM')
;

-- 7. Data Validation:
-- Remove invalid entries where ride_length_seconds <= 0 or the ride exceeds 24 hours.

-- SQL Query for checking if there is any ride_length_seconds less than or equal to 0
SELECT
	 COUNT(ride_length_seconds)
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
WHERE
	ride_length_seconds <= 0
;

-- SQL Query for checking if any rides lasted longer than a day (24 hours).
SELECT
	 COUNT(ride_length_seconds)
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
WHERE
	ride_length_seconds >= 24*60*60
;

-- SQL Query for deleting rows where ride_length_seconds â‰¤ 0 or the ride exceeds 24 hours.
DELETE
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
WHERE
	ride_length_seconds <= 0 
	OR ride_length_seconds >= 24*60*60
;

-- ANALYZE PHASE

-- 1. Preferred Types of Bikes for Each Rider Groups Over the Year:
-- SQL Query to count preferred bike types by rider group
SELECT
	member_casual,
	rideable_type,
	COUNT(rideable_type) number_of_rides
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY
	member_casual,
	rideable_type
;

-- 2. Average Ride Length by Each Rider Groups Per Hour:
-- SQL Query to calculate average ride length per hour by rider group
SELECT
	member_casual,
	hour_of_day,
	AVG(ride_length_seconds)/60 as avg_ride_length_min
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual,
	hour_of_day
ORDER BY
	hour_of_day,
	member_casual
;

-- 3. Average Ride Length by Each Rider Groups Per Day:
-- SQL Query to calculate average ride length per day by rider group
SELECT
	member_casual,
	day_of_week,
	AVG(ride_length_seconds)/60 as avg_ride_length_min
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual,
	day_of_week
ORDER BY
	CASE 
		WHEN day_of_week = 'Monday' THEN 1
		WHEN day_of_week = 'Tuesday' THEN 2
		WHEN day_of_week = 'Wednesday' THEN 3
		WHEN day_of_week = 'Thursday' THEN 4
		WHEN day_of_week = 'Friday' THEN 5
		WHEN day_of_week = 'Saturday' THEN 6
		WHEN day_of_week = 'Sunday' THEN 7
	END,
	member_casual
;

-- 4. Average Ride Length by Each Rider Group Per Month:
-- SQL Query to calculate average ride length per month by rider group
SELECT
	member_casual,
	month,
	AVG(ride_length_seconds)/60 as avg_ride_length_min
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual,
	month
ORDER BY
	CASE 
		WHEN month = 'January' THEN 1
		WHEN month = 'February' THEN 2
		WHEN month = 'March' THEN 3
		WHEN month = 'April' THEN 4
		WHEN month = 'May' THEN 5
		WHEN month = 'June' THEN 6
		WHEN month = 'July' THEN 7
		WHEN month = 'August' THEN 8
		WHEN month = 'September' THEN 9
		WHEN month = 'October' THEN 10
		WHEN month = 'November' THEN 11
		WHEN month = 'December' THEN 12
	END,
	member_casual
;

-- 5. Annual Average Ride Length by Each Rider Group:
-- SQL Query to calculate annual average ride length by rider group
SELECT
	member_casual,
	AVG(ride_length_seconds)/60 as avg_ride_length_min
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual
;

-- 6. Total Time Spent by Each Rider Group Per Hour:
-- SQL Query to calculate total time spent per hour by rider group
SELECT
	member_casual,
	hour_of_day,
	(SUM(ride_length_seconds))/(60*60) AS Total_ride_length_hour
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual,
	hour_of_day
ORDER BY
	hour_of_day,
	member_casual
;

-- 7. Total Time Spent by Each Rider Group Per Day:
-- SQL Query to calculate total time spent per day by rider group
	SELECT
		member_casual,
		day_of_week,
		(SUM(ride_length_seconds))/(60*60) AS Total_ride_length_hour
	FROM
		cyclistic_bike_share.dbo.Cyclistic_TripData_2022
	GROUP BY 
		member_casual,
		day_of_week
	ORDER BY
		CASE 
			WHEN day_of_week = 'Monday' THEN 1
			WHEN day_of_week = 'Tuesday' THEN 2
			WHEN day_of_week = 'Wednesday' THEN 3
			WHEN day_of_week = 'Thursday' THEN 4
			WHEN day_of_week = 'Friday' THEN 5
			WHEN day_of_week = 'Saturday' THEN 6
			WHEN day_of_week = 'Sunday' THEN 7
		END,
		member_casual
	;

-- 8. Total Time Spent by Each Rider Group Per Month:
-- SQL Query to calculate total time spent per month by rider group
SELECT
	member_casual,
	month,
	(SUM(ride_length_seconds))/(60*60) AS Total_ride_length_hour
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual,
	month
ORDER BY
	CASE 
		WHEN month = 'January' THEN 1
		WHEN month = 'February' THEN 2
		WHEN month = 'March' THEN 3
		WHEN month = 'April' THEN 4
		WHEN month = 'May' THEN 5
		WHEN month = 'June' THEN 6
		WHEN month = 'July' THEN 7
		WHEN month = 'August' THEN 8
		WHEN month = 'September' THEN 9
		WHEN month = 'October' THEN 10
		WHEN month = 'November' THEN 11
		WHEN month = 'December' THEN 12
	END,
	member_casual
;

-- 9. Annual Time Spent Percentage by Each Rider Group:
-- SQL Query to calculate percentage of total time spent by rider group
SELECT
	member_casual,
	(SUM(ride_length_seconds))/(60*60) AS Total_ride_length_hours
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY 
	member_casual
;

-- 10. Total Number of Rides by Each Rider Group Per Hour:
-- SQL Query to count total rides per hour by rider group
SELECT
	hour_of_day,
	member_casual,
	COUNT(member_casual) AS Total_rides
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022 
GROUP BY 
	member_casual,
	hour_of_day
ORDER BY
	hour_of_day,
	member_casual,	
	Total_rides
;

-- 11. Total Number of Rides by Each Rider Group Per Day:
-- SQL Query to count total rides per day by rider group
SELECT
	day_of_week,
	member_casual,
	COUNT(member_casual) AS Total_rides
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022 
GROUP BY 
	member_casual,
	day_of_week
ORDER BY
	CASE 
		WHEN day_of_week = 'Monday' THEN 1
		WHEN day_of_week = 'Tuesday' THEN 2
		WHEN day_of_week = 'Wednesday' THEN 3
		WHEN day_of_week = 'Thursday' THEN 4
		WHEN day_of_week = 'Friday' THEN 5
		WHEN day_of_week = 'Saturday' THEN 6
		WHEN day_of_week = 'Sunday' THEN 7
	END,
    member_casual
;

-- 12. Total Number of Rides by Each Rider Group Per Month:
-- SQL Query to count total rides per month by rider group
SELECT
	month,
	member_casual,
	COUNT(member_casual) AS Total_rides_daily
FROM
	cyclistic_bike_share.dbo.Cyclistic_TripData_2022
GROUP BY
	month,
	member_casual
ORDER BY
		CASE 
		WHEN month = 'January' THEN 1
		WHEN month = 'February' THEN 2
		WHEN month = 'March' THEN 3
		WHEN month = 'April' THEN 4
		WHEN month = 'May' THEN 5
		WHEN month = 'June' THEN 6
		WHEN month = 'July' THEN 7
		WHEN month = 'August' THEN 8
		WHEN month = 'September' THEN 9
		WHEN month = 'October' THEN 10
		WHEN month = 'November' THEN 11
		WHEN month = 'December' THEN 12
	END,
	member_casual
;

-- 13. Annual Total Rides Percentage by Each Rider Group:
-- SQL Query to calculate percentage of total rides by rider groups
SELECT 
	member_casual,
	COUNT(*) AS number_of_rides
FROM 
	Cyclistic_TripData_2022
GROUP BY 
	member_casual
	;

-- 14. Top 5 Routes for Each Group:
--SQL Query to find the top 5 routes per month for members.
SELECT
	*
FROM 
	( SELECT
		month,
		member_casual,
		start_station_name,
		end_station_name,
		COUNT(*) AS Total_rides_monthly,
		ROW_NUMBER() OVER(PARTITION BY member_casual, month ORDER BY COUNT(member_casual)DESC
			 ) AS route_rank
	FROM
		cyclistic_bike_share.dbo.Cyclistic_TripData_2022 
	WHERE
		 start_station_name IS NOT NULL
		 AND end_station_name IS NOT NULL
	GROUP BY
		month,
		member_casual,
		start_station_name,
		end_station_name
	) ranks
WHERE 
	route_rank <=5 
	AND member_casual = 'member'
	
ORDER BY 
CASE 
		WHEN month = 'January' THEN 1
		WHEN month = 'February' THEN 2
		WHEN month = 'March' THEN 3
		WHEN month = 'April' THEN 4
		WHEN month = 'May' THEN 5
		WHEN month = 'June' THEN 6
		WHEN month = 'July' THEN 7
		WHEN month = 'August' THEN 8
		WHEN month = 'September' THEN 9
		WHEN month = 'October' THEN 10
		WHEN month = 'November' THEN 11
		WHEN month = 'December' THEN 12
	END,
	Total_rides_monthly DESC
;

-- Top 5 routes for Casual Riders:
-- SQL Query to find  the top 5 routes per month for casual riders
SELECT
	*
FROM 
	( SELECT
		month,
		member_casual,
		start_station_name,
		end_station_name,
		COUNT(*) AS Total_rides_monthly,
		ROW_NUMBER() OVER(PARTITION BY member_casual, month ORDER BY COUNT(member_casual)DESC
			 ) AS route_rank
	FROM
		cyclistic_bike_share.dbo.Cyclistic_TripData_2022 
	WHERE
		 start_station_name IS NOT NULL
		 AND end_station_name IS NOT NULL
	GROUP BY
		month,
		member_casual,
		start_station_name,
		end_station_name
	) ranks
WHERE 
	route_rank <=5 
	AND member_casual = 'casual'
	
ORDER BY 
CASE 
		WHEN month = 'January' THEN 1
		WHEN month = 'February' THEN 2
		WHEN month = 'March' THEN 3
		WHEN month = 'April' THEN 4
		WHEN month = 'May' THEN 5
		WHEN month = 'June' THEN 6
		WHEN month = 'July' THEN 7
		WHEN month = 'August' THEN 8
		WHEN month = 'September' THEN 9
		WHEN month = 'October' THEN 10
		WHEN month = 'November' THEN 11
		WHEN month = 'December' THEN 12
	END,
	Total_rides_monthly DESC
;
